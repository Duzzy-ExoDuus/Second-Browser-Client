#!/usr/bin/env python

import json
import os
import struct
import sys
import threading
import Queue

# On Windows, the default I/O mode is O_TEXT. Set this to O_BINARY
# to avoid unwanted modifications of the input/output streams.
if sys.platform == "win32":
  import os, msvcrt
  msvcrt.setmode(sys.stdin.fileno(), os.O_BINARY)
  msvcrt.setmode(sys.stdout.fileno(), os.O_BINARY)

browser_list = "browsers.json"

# helper to return configured browsers
def available_browsers():
  jdata = json.loads(open(browser_list).read())
  return jdata

# Helper function that sends a message to the webapp.
def send_message(message):
   # Write message size.
  sys.stdout.write(struct.pack('I', len(message)))
  # Write the message itself.
  sys.stdout.write(message)
  sys.stdout.flush()

# Thread that reads messages from the webapp.
def receiveMessage():
  message_number = 0
  while 1:
    # Read the message length (first 4 bytes).
    text_length_bytes = sys.stdin.read(4)

    if len(text_length_bytes) == 0:
      sys.exit(0)

    # Unpack message length as 4 byte integer.
    text_length = struct.unpack('i', text_length_bytes)[0]

    # Read the text (JSON object) of the message.
    text = sys.stdin.read(text_length).decode('utf-8')
    jdata = json.loads(text)

    ACTIONS[jdata["request"]](jdata["data"])

# 
# ACTIONS
# Explicity define acceptable messages 
# Map helper functions
#

def sendBrowserList(data):
  browsers = available_browsers()
  send_message(json.dumps(browsers))

def launchBrowserWithURL(data):
  print "here"

ACTIONS = {
  "BROWSERS": sendBrowserList,
  "LAUNCH": launchBrowserWithURL
}

def Main():
  receiveMessage()
  sys.exit(0)

if __name__ == '__main__':
  Main()
