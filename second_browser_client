#!/usr/bin/env python

import json
import os
import struct
import sys
import subprocess
import time

from os import path

if sys.platform == "win32":
  import os, msvcrt
  msvcrt.setmode(sys.stdin.fileno(), os.O_BINARY)
  msvcrt.setmode(sys.stdout.fileno(), os.O_BINARY)

browser_list = "browsers.json"

# helper to return configured browsers
def available_browsers():
  try:
    text = open(browser_list).read()
    jdata = json.loads(text)
  except Exception as e:
    jdata = { "ERROR": "unable to open browsers.json" }
  return jdata

# Helper function that sends a message to the webapp.
def send_message(message):
   # Write message size.
  sys.stdout.write(struct.pack('I', len(message)))
  # Write the message itself.
  sys.stdout.write(message)
  sys.stdout.flush()

def receive_message():
  message_number = 0
  while 1:
    # Read the message length (first 4 bytes).
    text_length_bytes = sys.stdin.read(4)

    if len(text_length_bytes) == 0:
      sys.exit(0)

    # Unpack message length as 4 byte integer.
    text_length = struct.unpack('i', text_length_bytes)[0]

    # Read the text (JSON object) of the message.
    text = sys.stdin.read(text_length).decode('utf-8')
    jdata = json.loads(text)

    ACTIONS[jdata["request"]](jdata["data"])

# 
# ACTIONS
# Explicity define acceptable messages 
# Map helper functions
#
def addBrowser(data):
  browsers = available_browsers()
  if "browser_file" in data:
    browser_file = data["browser_file"]
  if "browser_label" in data:
    browser_label = data["browser_label"]
  if not browser_file or not browser_label:
    return_string = { "ERROR": "Unable to add browser", "ErrorMessage": "Invalid Input" }
  elif browser_label in browsers:
    return_string = { "ERROR": "Unable to add browser", "ErrorMessage": "Browser Is Already Added" }
  else:
    try:
      backup_browser_file = "browsers.json.{}".format(time.strftime("%d-%m-%Y"))
      with open(backup_browser_file, "w") as bbh:
        json.dump(browsers, bbh)
      with open(browser_list, "w") as bh:
        browsers[browser_label] = browser_file
        json.dump(browsers, bh)
      return_string = { "response": "SUCCESS" }
    except Exception as e:
      return_string = { "ERROR": "Unable to add browser", "ErrorMessage": "Unknown Error Occured" }

  send_message(json.dumps(return_string))

def sendBrowserList(data):
  browsers = available_browsers()
  send_message(json.dumps(browsers))

def launchBrowserWithURL(data):
  url = data["url"]
  browser = None
  if "browser" in data and data["browser"] != "None" and data["browser"] != "":
    browser = data["browser"]
  else:
    error = {"ERROR": "No Browser Selected"}
    send_message(json.dumps(error))

  browsers = available_browsers()
  if browser and browser not in browsers:
    error = {"ERROR": "Unable To Launch Browser", "ErrorMessage": browsers }
    send_message(json.dumps(error))
  else:
    browser_launch = browsers[browser]
    cmd = browser_launch + " " + url
    return_string = { "launch": browser_launch, "url": url }

    if not os.path.exists(browser_launch.replace("\"", "")) and browser_launch.find("MicrosoftEdge") == -1: # stupid microsoft edge
      return_string =  {"ERROR": "Unable To Launch Browser", "ErrorMessage": "Couldn't locate browser. Is it installed?" }

    send_message(json.dumps(return_string))
    subprocess.Popen(cmd, shell=True)

ACTIONS = {
  "BROWSERS": sendBrowserList,
  "LAUNCH": launchBrowserWithURL,
  "ADD": addBrowser
}

def Main():
  receive_message()
  sys.exit(0)

if __name__ == '__main__':
  Main()
